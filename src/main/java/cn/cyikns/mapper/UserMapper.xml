<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace：命名空间，用于隔离sql，还有一个很重要的作用，即服务于动态代理开发，填上包名 -->
<mapper namespace="cn.cyikns.mapper.UserMapper">

    <!-- 声明sql片段 -->
    <sql id="refid">
        SELECT * FROM
    </sql>

    <select id="selectUserById" parameterType="int" resultType="User">
      select * from tb_user where id = #{id}
    </select>

    <select id="queryUser" parameterType="String" resultType="cn.cyikns.pojo.User">
      select * from tb_user where username like "%"#{values}"%"
    </select>

    <update id="updateUserById" parameterType="cn.cyikns.pojo.User">
        update tb_user set username = #{username},password = #{password},address = #{address} where id = #{id}
    </update>

    <delete id="delUserById" parameterType="int" timeout="5000">
        delete from tb_user where id = #{id}
    </delete>

    <insert id="addUser" parameterType="cn.cyikns.pojo.User" timeout="5000">
        <selectKey keyColumn="id" keyProperty="id" order="AFTER" resultType="int">
            select LAST_INSERT_ID()
        </selectKey>
        insert into tb_user(username, password, address) values (#{username},#{password},#{address})
    </insert>

    <select id="queryUserByQueryVo" parameterType="queryVo" resultType="user" timeout="5000">

        select * from tb_user where username like "%"#{user.username}"%"
    </select>


    <!-- 改造前
     <select id="queryUserList" parameterType="user" resultType="user">
     SELECT * FROM tb_user
     WHERE password = #{password} AND username LIKE "%"#{username}"%"
   </select>
     &lt;!&ndash;改造后&ndash;&gt;
     <select id="queryUserList" parameterType="user" resultMap="user">
         select * from tb_user
         where 1=1
         <if test="password != null and password != ''">
             and password = #{password}
         </if>
         <if test="username != null and username != ''">
             and username LIKE "%"#{username}"%"
         </if>

     </select>
     &lt;!&ndash;改造后3&ndash;&gt;
     <select id="queryUserList" parameterType="user" resultMap="user">
         <include refid="refid"/>
         tb_user
         &lt;!&ndash; where标签可以自动添加where，同时处理sql语句中第一个and关键字(前and) &ndash;&gt;
         <where>
             <if test="password != null and password != ''">
                 and password = #{password}
             </if>
             <if test="username != null and username != ''">
                 and username LIKE "%"#{username}"%"
             </if>
         </where>
     </select>-->


    <!--foreach标签
        SELECT * FROM tb_user WHERE id IN (1,13,26)<br>
    -->
    <select id="queryUserForeach" parameterType="list" resultType="user">
        <include refid="refid"/>
        tb_user
        where id in
        <!-- foreach标签，进行遍历 -->
        <!-- collection：遍历的集合，数组必须写array -->
        <!-- item：遍历的项目，可以随便写，，但是和后面的#{}里面要一致 -->
        <!-- open：在前面添加的sql片段 -->
        <!-- close：在结尾处添加的sql片段 -->
        <!-- separator：指定遍历的元素之间使用的分隔符 -->

        <foreach collection="list" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </select>

    <resultMap id="userOrderResultMap" type="user">
        <id property="id" column="id"/>
        <result property="username" column="username"/>
        <result property="address" column="address"/>
        <!--配置一对多关系-->
        <collection property="orders" javaType="list" ofType="order">
            <!-- 配置主键，是关联Order的唯一标识 -->
            <id property="id" column="id"/>
            <result property="userId" column="user_id"/>
            <result property="shoppingName" column="shopping_name"/>
        </collection>

    </resultMap>

    <!-- 一对多关联，查询订单同时查询该用户下的订单 -->
    <select id="queryUserAndOrders" resultMap="userOrderResultMap" timeout="5000">
        select
            o.id,
            o.user_id,
            u.username,
            o.shopping_name,
            u.address
        from
            tb_user u
        left join
            tb_order o
        on
            o.user_id = u.id
    </select>
</mapper>
